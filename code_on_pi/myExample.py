import time
import socket
import sys
import pickle
sys.path.append("..")
from ardSerial import *

wkF = [35, 0, 2, 1,
  42,  73,  83,  75, -43, -42, -49, -41,
  37,  75,  78,  77, -41, -41, -50, -41,
  36,  78,  73,  40, -38, -41, -50, -41,
  37,  81,  68,  82, -36, -41, -50, -40,
  41,  83,  62,  85, -36, -40, -48, -40,
  42,  88,  57,  85, -36, -40, -47, -39,
  45,  92,  51,  88, -37, -44, -44, -38,
  48,  91,  50,  90, -38, -45, -41, -37,
  51,  89,  55,  91, -39, -48, -40, -36,
  53,  84,  55,  93, -40, -49, -40, -35,
  56,  40,  58,  99, -40, -50, -41, -37,
  59,  75,  61, 101, -41, -50, -41, -40,
  62,  69,  64, 101, -41, -50, -41, -42,
  64,  64,  65,  99, -41, -49, -41, -44,
  67,  58,  68,  95, -42, -48, -42, -46,
  70,  53,  71,  92, -42, -47, -42, -47,
  73,  48,  74,  88, -42, -45, -41, -48,
  74,  42,  75,  83, -41, -43, -41, -49,
  77,  37,  78,  78, -41, -41, -41, -50,
  40,  36,  81,  73, -41, -38, -41, -50,
  82,  37,  83,  68, -40, -36, -40, -50,
  85,  41,  85,  62, -40, -36, -40, -48,
  89,  42,  87,  57, -41, -36, -39, -47,
  93,  45,  89,  51, -45, -37, -38, -44,
  92,  48,  91,  50, -47, -38, -37, -41,
  88,  51,  93,  55, -48, -39, -36, -40,
  83,  53,  96,  55, -49, -40, -35, -40,
  78,  56, 100,  58, -50, -40, -38, -41,
  73,  59, 102,  61, -50, -41, -42, -41,
  68,  62,  99,  64, -50, -41, -43, -41,
  62,  64,  96,  65, -48, -41, -45, -41,
  57,  67,  93,  68, -47, -42, -47, -42,
  51,  70,  89,  71, -46, -42, -48, -42,
  46,  73,  84,  74, -45, -42, -49, -41,
  20,  40,   0,   0,   5,   5,   3,   3,  90,  90,  45,  45, -60, -60, 5, 5]

layflat = [
    1, 0, 0, 1,
    -30, -90, -45, 0, -3, -3, 3, 3, 90, 90, 90, 90, -90, -90, -90, -90]

stretch = [
    1, 0, 20, 1,
    0, 30, 0, 0, -5, -5, 0, 0, 5, 5, 30, 30, 60, 60, 0, 0]

collect = [
    22, 0, 15, 1,
 -75, -75,  53,  45,  60,  60,  -5,   9,
 -75, -75,  44,  48,  60,  60,  -8,  12,
 -75, -75,  32,  49,  60,  60,  -6,  15,
 -75, -75,  22,  52,  60,  60,  -2,  19,
 -75, -75,  18,  52,  60,  60,   7,  24,
 -75, -75,  20,  52,  60,  60,   9,  32,
 -75, -75,  26,  52,  60,  60,   6,  37,
 -75, -75,  31,  58,  60,  60,   5,  32,
 -75, -75,  35,  64,  60,  60,   5,  20,
 -75, -75,  40,  63,  60,  60,   5,   7,
 -75, -75,  43,  58,  60,  60,   7,  -2,
 -75, -75,  47,  51,  60,  60,   9,  -7,
 -75, -75,  49,  40,  60,  60,  12,  -8,
 -75, -75,  51,  28,  60,  60,  16,  -6,
 -75, -75,  52,  19,  60,  60,  20,   1,
 -75, -75,  53,  18,  60,  60,  27,   8,
 -75, -75,  51,  21,  60,  60,  37,   9,
 -75, -75,  54,  27,  60,  60,  38,   7,
 -75, -75,  61,  32,  60,  60,  27,   6,
 -75, -75,  64,  36,  60,  60,  13,   6,
 -75, -75,  61,  41,  60,  60,   2,   7,
 -75, -75,  55,  44,  60,  60,  -5,   9
]

test = [
    1, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0 
]
# servo map: [null, null, null, ,null ,null ,null, null ,fl shoulder ,fr shoulder ,br hip ,bl hip , fl knee,fr knee, br knee, bl knee]
# directionality: [null, null, null, ,null ,null ,null, null ,fl shoulder ,-: to front +: to back ,br hip ,-: to front +: to back , fl knee,fr knee, -:shorten +:lengthen, +:lengthen -:shorten]
carry = [
    34, 0, 2, 1,
  42,  73,  83,  75, -23, -22, -69, -61,
  37,  75,  78,  77, -21, -21, -70, -61,
  36,  78,  73,  80, -18, -21, -70, -61,
  37,  81,  68,  82, -16, -21, -70, -60,
  41,  83,  62,  85, -16, -20, -68, -60,
  42,  88,  57,  85, -16, -20, -67, -59,
  45,  92,  51,  88, -17, -24, -64, -58,
  48,  91,  50,  90, -18, -25, -61, -57,
  51,  89,  55,  91, -19, -28, -60, -56,
  53,  84,  55,  93, -20, -29, -60, -55,
  56,  80,  58,  99, -20, -30, -61, -57,
  59,  75,  61, 101, -21, -30, -61, -60,
  62,  69,  64, 101, -21, -30, -61, -62,
  64,  64,  65,  99, -21, -29, -61, -64,
  67,  58,  68,  95, -22, -28, -62, -66,
  70,  53,  71,  92, -22, -27, -62, -67,
  73,  48,  74,  88, -22, -25, -61, -68,
  74,  42,  75,  83, -21, -23, -61, -69,
  77,  37,  78,  78, -21, -21, -61, -70,
  80,  36,  81,  73, -21, -18, -61, -70,
  82,  37,  83,  68, -20, -16, -60, -70,
  85,  41,  85,  62, -20, -16, -60, -68,
  89,  42,  87,  57, -21, -16, -59, -67,
  93,  45,  89,  51, -25, -17, -58, -64,
  92,  48,  91,  50, -27, -18, -57, -61,
  88,  51,  93,  55, -28, -19, -56, -60,
  83,  53,  96,  55, -29, -20, -55, -60,
  78,  56, 100,  58, -30, -20, -58, -61,
  73,  59, 102,  61, -30, -21, -62, -61,
  68,  62,  99,  64, -30, -21, -63, -61,
  62,  64,  96,  65, -28, -21, -65, -61,
  57,  67,  93,  68, -27, -22, -67, -62,
  51,  70,  89,  71, -26, -22, -68, -62,
  46,  73,  84,  74, -25, -22, -69, -61
]

turn = [
    36, 0, 0, 1,
  29,  26,  29,  26,  27,  22,  7,  2,
  27,  26,  31,  25,  28,  22,  8,  5,
  26,  25,  33,  23,  30,  24,  10, 7,
  25,  25,  36,  23,  31,  24,  11, 7,
  23,  25,  38,  24,  33,  22,  8,  6,
  20,  23,  41,  29,  35,  21,  4,  0,
  17,  17,  43,  34,  39,  27,  4,  -4,
  16,  11,  46,  39,  41,  35,  4,  -3,
  13,  10,  46,  42,  42,  38,  4,  -6,
  10,  10,  44,  45,  40,  40,  0,  3,
  10,  13,  42,  46,  38,  42,  -6, 4,
  11,  16,  37,  44,  35,  41,  -2, 4,
  17,  17,  31,  43,  27,  39,  -7, 4,
  23,  20,  26,  39,  21,  35,  4,  6,
  25,  23,  24,  37,  22,  33,  6,  10,
  25,  25,  23,  35,  24,  31,  7,  11,
  25,  26,  24,  33,  24,  30,  6,  10,
  26,  27,  26,  30,  22,  28,  4,  7,
  26,  29,  26,  28,  22,  27,  1,  7,
  25,  31,  26,  26,  25,  28,  3,  9,
  23,  33,  25,  26,  27,  30,  5,  10,
  23,  36,  25,  24,  27,  31,  2,  12,
  24,  38,  25,  22,  26,  28,  0,  14,
  29,  41,  20,  19,  20,  24,  3,  17,
  34,  43,  13,  17,  14,  24,  11, 19,
  39,  46,  10,  14,  13,  24,  18, 22,
  42,  46,  10,  11,  16,  24,  19, 21,
  45,  44,  11,  10,  23,  20,  21, 19,
  46,  42,  14,  10,  24,  16,  22, 18,
  44,  37,  17,  13,  24,  12,  19, 11,
  43,  31,  19,  20,  24,  17,  17, 3,
  39,  26,  22,  25,  26,  24,  14, 0,
  37,  24,  24,  25,  30,  26,  12, 2,
  35,  23,  26,  25,  31,  27,  10, 5,
  33,  24,  26,  26,  30,  26,  9,  3,
  30,  26,  28,  26,  27,  24,  7,  1
]
# servo map: [fl shoulder ,fr shoulder ,br hip ,bl hip , fl knee,fr knee, br knee, bl knee]
# directionality: [fl shoulder ,-: to front +: to back ,br hip ,-: to front +: to back , fl knee,fr knee, -:shorten +:lengthen, +:lengthen -:shorten]

model = 'Bittle'
postureTable = postureDict[model]

def turnAround(port):
    send(port, ['K', turn, 4.5])
    

if __name__ == '__main__':
    try:
        goodPorts = {}
        connectPort(goodPorts)
        t=threading.Thread(target = keepCheckingPort, args = (goodPorts,))
        t.start()
        parallel = False
        #send(goodPorts, ['krest', .5])
        #send(goodPorts, ['kcrF', 2])
        #send(goodPorts, ['K', layflat, 1])
        #send(goodPorts, ['kbk', .75])
        #send(goodPorts, ['krest', 1])
        send(goodPorts, ['K', collect, 5])
        #turnAround(goodPorts)
        
        
        closeAllSerial(goodPorts)
        logger.info("finish!")
        os._exit(0)
    except Exception as e:
        logger.info("Exception")
        closeAllSerial(goodPorts)
        os._exit(0)
        raise e
